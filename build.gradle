plugins {
    id 'org.jetbrains.kotlin.jvm' apply false
    id 'maven-publish'
}

ext {
    kotlin_extensions_version = "0.4.3"
}

subprojects {
    if (childProjects.isEmpty()) {
        beforeEvaluate {
            repositories {
                mavenLocal()
            
                project.properties.getOrDefault("mavenInternalRepositoryUrl", "").tap { localUrl ->
                    if (localUrl.empty) {
                        project.logger.error("Using mavenCentral repository")
                        mavenCentral()
                    } else {
                        project.logger.error("Using internal URL repository: ${localUrl}")
                        maven {
                            url localUrl
            
                            credentials {
                                username = project.properties["mavenUsername"]
                                password = project.properties["mavenPassword"]
                            }
                        }
                    }
                }
            }
        }

        afterEvaluate {
            tasks {
                compileKotlin {
                    kotlinOptions {
                        jvmTarget = "11"
                        freeCompilerArgs += ['-Xopt-in=kotlin.ExperimentalUnsignedTypes,kotlin.time.ExperimentalTime']
                    }
                }

                compileTestKotlin {
                    kotlinOptions {
                        jvmTarget = "11"
                        freeCompilerArgs += ['-Xopt-in=kotlin.ExperimentalUnsignedTypes,kotlin.time.ExperimentalTime']
                    }
                }
            }

            tasks.findAll { it instanceof Test }.each { task ->
                task.jvmArgs += [
                        "-server",
                        "-Xms2G",
                        "-Xmx5G",
                        "-XX:MaxDirectMemorySize=2g",
                        "-XX:+UseParallelGC",
                        "-XX:SurvivorRatio=6",
                        "-XX:-UseGCOverheadLimit"]

                task.testLogging {
                    events "passed", "skipped", "failed" //, "standardOut", "standardError"

                    showExceptions true
                    exceptionFormat "full"
                    showCauses true
                    showStackTraces true

                    // showStandardStreams = false
                }
            }

            if (tasks.findByName("sourcesJar") == null) {
                task sourcesJar(type: Jar, dependsOn: classes) {
                    classifier = 'sources'
                    from sourceSets.main.allSource
                }
            }

            publishing {
                publications {
                    "$name"(MavenPublication) {
                        groupId = group
                        artifactId = name
                        version = version
                        from components.kotlin
                        artifact tasks.sourcesJar
                    }
                }
            }

            if (project.name != "proposal") {
                dependencies {
                    implementation project(":common:proposal")
                }
            }

            dependencies {
                implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib'
                implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect'
                implementation group: 'org.jetbrains.kotlin', name: 'kotlin-test'

                implementation group: 'com.github.inforion.common', name: 'logging', version: kotlin_extensions_version
                implementation group: 'com.github.inforion.common', name: 'extensions', version: kotlin_extensions_version
                implementation group: 'com.github.inforion.common', name: 'concurrent', version: kotlin_extensions_version
                implementation group: 'com.github.inforion.common', name: 'iobuffer', version: kotlin_extensions_version
                implementation group: 'com.github.inforion.common', name: 'optional', version: kotlin_extensions_version

                implementation group: 'joda-time', name: 'joda-time', version: '2.10.10'

                testImplementation group: 'junit', name: 'junit', version: '4.13.2'

                testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit'

                // Enable use of the JUnitPlatform Runner within the IDE
                testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.6.2'
                testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.6.2'
            }
        }
    }
}
